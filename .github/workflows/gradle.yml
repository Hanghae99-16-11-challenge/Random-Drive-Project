# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    # - name: Login to DockerHub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{secrets.DOCKERHUB_USERNAME}}
    #     password: ${{secrets.DOCKERHUB_TOKEN}}
      
    # # Docker 이미지 빌드
    # - name: Docker Image Build
    #   run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .

    # # DockerHub Push
    # - name: DockerHub Push
    #   run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
      
    # # EC2 인스턴스 접속 및 애플리케이션 실행
    # - name: Application Run
    #   uses: appleboy/ssh-action@v0.1.6
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USERNAME }}
    #     key: ${{ secrets.EC2_KEY }}

    #     script: |
    #       sudo docker kill ${{ secrets.CONTAINER_NAME }}
    #       sudo docker rm -f ${{ secrets.CONTAINER_NAME }}
    #       sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
    #       sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
    #       sudo docker run -p 8080:8080 --name ${{ secrets.CONTAINER_NAME }} -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
